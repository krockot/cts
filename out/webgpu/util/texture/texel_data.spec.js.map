{"version":3,"sources":["../../../../src/webgpu/util/texture/texel_data.spec.ts"],"names":["description","makeTestGroup","assert","kEncodableTextureFormats","kEncodableTextureFormatInfo","GPUTest","kTexelRepresentationInfo","getSingleDataType","getComponentReadbackTraits","g","doTest","t","format","params","componentData","rep","texelData","pack","texture","device","createTexture","size","usage","GPUTextureUsage","COPY_DST","SAMPLED","queue","writeTexture","bytesPerRow","byteLength","ReadbackTypedArray","shaderType","shader","componentOrder","map","C","i","join","toLowerCase","pipeline","createComputePipeline","compute","module","createShaderModule","code","entryPoint","outputBuffer","createBuffer","length","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","createView","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","submit","finish","expectContents","c","value","decode","undefined","makeParam","fn","R","componentInfo","bitLength","G","B","A","test","u","combine","filter","copyDst","color","beginSubcases","expand","max","Math","pow","floor","offset","range"],"mappings":"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","sourcesContent":["export const description = 'Test helpers for texel data produce the expected data in the shader';\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\nimport {\n  kEncodableTextureFormats,\n  kEncodableTextureFormatInfo,\n  EncodableTextureFormat,\n} from '../../capability_info.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nimport {\n  kTexelRepresentationInfo,\n  getSingleDataType,\n  getComponentReadbackTraits,\n} from './texel_data.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nfunction doTest(\n  t: GPUTest & {\n    params: {\n      format: EncodableTextureFormat;\n      componentData: {\n        R?: number;\n        G?: number;\n        B?: number;\n        A?: number;\n      };\n    };\n  }\n) {\n  const { format } = t.params;\n  const componentData = t.params.componentData;\n\n  const rep = kTexelRepresentationInfo[format];\n  const texelData = rep.pack(componentData);\n  const texture = t.device.createTexture({\n    format,\n    size: [1, 1, 1],\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED,\n  });\n\n  t.device.queue.writeTexture(\n    { texture },\n    texelData,\n    {\n      bytesPerRow: texelData.byteLength,\n    },\n    [1]\n  );\n\n  const { ReadbackTypedArray, shaderType } = getComponentReadbackTraits(getSingleDataType(format));\n\n  const shader = `\n  [[group(0), binding(0)]] var tex : texture_2d<${shaderType}>;\n\n  [[block]] struct Output {\n    ${rep.componentOrder\n      .map((C, i) => `[[offset(${i * 4})]] result${C} : ${shaderType};`)\n      .join('\\n')}\n  };\n  [[group(0), binding(1)]] var<storage, read_write> output : Output;\n\n  [[stage(compute)]]\n  fn main() {\n      var texel : vec4<${shaderType}> = textureLoad(tex, vec2<i32>(0, 0), 0);\n      ${rep.componentOrder.map(C => `output.result${C} = texel.${C.toLowerCase()};`).join('\\n')}\n      return;\n  }`;\n\n  const pipeline = t.device.createComputePipeline({\n    compute: {\n      module: t.device.createShaderModule({\n        code: shader,\n      }),\n      entryPoint: 'main',\n    },\n  });\n\n  const outputBuffer = t.device.createBuffer({\n    size: rep.componentOrder.length * 4,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: texture.createView(),\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: outputBuffer,\n        },\n      },\n    ],\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatch(1);\n  pass.endPass();\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectContents(\n    outputBuffer,\n    new ReadbackTypedArray(\n      rep.componentOrder.map(c => {\n        const value = rep.decode(componentData)[c];\n        assert(value !== undefined);\n        return value;\n      })\n    )\n  );\n}\n\n// Make a test parameter by mapping a format and each component to a texel component\n// data value.\nfunction makeParam(\n  format: EncodableTextureFormat,\n  fn: (bitLength: number, index: number) => number\n) {\n  const rep = kTexelRepresentationInfo[format];\n  return {\n    R: rep.componentInfo.R ? fn(rep.componentInfo.R.bitLength, 0) : undefined,\n    G: rep.componentInfo.G ? fn(rep.componentInfo.G.bitLength, 1) : undefined,\n    B: rep.componentInfo.B ? fn(rep.componentInfo.B.bitLength, 2) : undefined,\n    A: rep.componentInfo.A ? fn(rep.componentInfo.A.bitLength, 3) : undefined,\n  };\n}\n\ng.test('unorm_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => {\n        return (\n          kEncodableTextureFormatInfo[format].copyDst &&\n          kEncodableTextureFormatInfo[format].color &&\n          getSingleDataType(format) === 'unorm'\n        );\n      })\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        const max = (bitLength: number) => Math.pow(2, bitLength) - 1;\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n          makeParam(format, bitLength => max(bitLength)),\n\n          // Test a middle value\n          makeParam(format, bitLength => Math.floor(max(bitLength) / 2)),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            const offset = [0.13, 0.63, 0.42, 0.89];\n            return Math.floor(offset[i] * max(bitLength));\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('snorm_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => {\n        return (\n          kEncodableTextureFormatInfo[format].copyDst &&\n          kEncodableTextureFormatInfo[format].color &&\n          getSingleDataType(format) === 'snorm'\n        );\n      })\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        const max = (bitLength: number) => Math.pow(2, bitLength - 1) - 1;\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n          makeParam(format, bitLength => max(bitLength)),\n          makeParam(format, bitLength => -max(bitLength)),\n          makeParam(format, bitLength => -max(bitLength) - 1),\n\n          // Test a middle value\n          makeParam(format, bitLength => Math.floor(max(bitLength) / 2)),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            const offset = [0.13, 0.63, 0.42, 0.89];\n            const range = 2 * max(bitLength);\n            return -max(bitLength) + Math.floor(offset[i] * range);\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('uint_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => {\n        return (\n          kEncodableTextureFormatInfo[format].copyDst &&\n          kEncodableTextureFormatInfo[format].color &&\n          getSingleDataType(format) === 'uint'\n        );\n      })\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        const max = (bitLength: number) => Math.pow(2, bitLength) - 1;\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n          makeParam(format, bitLength => max(bitLength)),\n\n          // Test a middle value\n          makeParam(format, bitLength => Math.floor(max(bitLength) / 2)),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            const offset = [0.13, 0.63, 0.42, 0.89];\n            return Math.floor(offset[i] * max(bitLength));\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('sint_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => {\n        return (\n          kEncodableTextureFormatInfo[format].copyDst &&\n          kEncodableTextureFormatInfo[format].color &&\n          getSingleDataType(format) === 'sint'\n        );\n      })\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        const max = (bitLength: number) => Math.pow(2, bitLength - 1) - 1;\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n          makeParam(format, bitLength => max(bitLength)),\n          makeParam(format, bitLength => -max(bitLength) - 1),\n\n          // Test a middle value\n          makeParam(format, bitLength => Math.floor(max(bitLength) / 2)),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            const offset = [0.13, 0.63, 0.42, 0.89];\n            const range = 2 * max(bitLength);\n            return -max(bitLength) + Math.floor(offset[i] * range);\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('float_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => {\n        return (\n          kEncodableTextureFormatInfo[format].copyDst &&\n          kEncodableTextureFormatInfo[format].color &&\n          getSingleDataType(format) === 'float'\n        );\n      })\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n\n          // TODO: Test NaN, Infinity, -Infinity\n\n          // Test some values\n          makeParam(format, () => 0.1199951171875),\n          makeParam(format, () => 1.4072265625),\n          makeParam(format, () => 24928),\n          makeParam(format, () => -0.1319580078125),\n          makeParam(format, () => -323.25),\n          makeParam(format, () => -7440),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            return [24896, -0.1319580078125, -323.25, -234.375][i];\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('ufloat_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => {\n        return (\n          kEncodableTextureFormatInfo[format].copyDst &&\n          kEncodableTextureFormatInfo[format].color &&\n          getSingleDataType(format) === 'ufloat'\n        );\n      })\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n\n          // TODO: Test NaN, Infinity\n\n          // Test some values\n          makeParam(format, () => 0.119140625),\n          makeParam(format, () => 1.40625),\n          makeParam(format, () => 24896),\n\n          // Test scattered mixed values\n          makeParam(format, (bitLength, i) => {\n            return [24896, 1.40625, 0.119140625, 0.23095703125][i];\n          }),\n\n          // Test mixed values that are close in magnitude.\n          makeParam(format, (bitLength, i) => {\n            return [0.1337890625, 0.17919921875, 0.119140625, 0.125][i];\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n"],"file":"texel_data.spec.js"}