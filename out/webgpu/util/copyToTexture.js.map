{"version":3,"sources":["../../../src/webgpu/util/copyToTexture.ts"],"names":["GPUTest","align","kBytesPerRowAlignment","CopyToTextureUtils","checkCopyExternalImageResult","src","expected","width","height","bytesPerPixel","exp","Uint8Array","buffer","byteOffset","byteLength","rowPitch","dst","createCopyForMapRead","eventualAsyncExpectation","niceStack","mapAsync","GPUMapMode","READ","actual","getMappedRange","check","checkBufferWithRowPitch","undefined","message","rec","expectationFailed","destroy","bytesPerRow","y","checkResult","checkBuffer","subarray","doTestAndCheckResult","imageCopyExternalImage","dstTextureCopyView","copySize","expectedData","device","queue","copyExternalImageToTexture","externalImage","source","dstTexture","texture","testBuffer","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","encoder","createCommandEncoder","copyTextureToBuffer","mipLevel","origin","x","z","depthOrArrayLayers","submit","finish"],"mappings":"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","sourcesContent":["import { GPUTest } from '../gpu_test.js';\n\nimport { align } from './math.js';\nimport { kBytesPerRowAlignment } from './texture/layout.js';\n\nexport class CopyToTextureUtils extends GPUTest {\n  checkCopyExternalImageResult(\n    src: GPUBuffer,\n    expected: ArrayBufferView,\n    width: number,\n    height: number,\n    bytesPerPixel: number\n  ): void {\n    const exp = new Uint8Array(expected.buffer, expected.byteOffset, expected.byteLength);\n    const rowPitch = align(width * bytesPerPixel, kBytesPerRowAlignment);\n    const dst = this.createCopyForMapRead(src, 0, rowPitch * height);\n\n    this.eventualAsyncExpectation(async niceStack => {\n      await dst.mapAsync(GPUMapMode.READ);\n      const actual = new Uint8Array(dst.getMappedRange());\n      const check = this.checkBufferWithRowPitch(\n        actual,\n        exp,\n        width,\n        height,\n        rowPitch,\n        bytesPerPixel\n      );\n      if (check !== undefined) {\n        niceStack.message = check;\n        this.rec.expectationFailed(niceStack);\n      }\n      dst.destroy();\n    });\n  }\n\n  checkBufferWithRowPitch(\n    actual: Uint8Array,\n    exp: Uint8Array,\n    width: number,\n    height: number,\n    rowPitch: number,\n    bytesPerPixel: number\n  ): string | undefined {\n    const bytesPerRow = width * bytesPerPixel;\n    for (let y = 0; y < height; ++y) {\n      const checkResult = this.checkBuffer(\n        actual.subarray(y * rowPitch, bytesPerRow),\n        exp.subarray(y * bytesPerRow, bytesPerRow)\n      );\n      if (checkResult !== undefined) return `on row ${y}: ${checkResult}`;\n    }\n    return undefined;\n  }\n\n  doTestAndCheckResult(\n    imageCopyExternalImage: GPUImageCopyExternalImage,\n    dstTextureCopyView: GPUImageCopyTexture,\n    copySize: GPUExtent3DDict,\n    bytesPerPixel: number,\n    expectedData: Uint8ClampedArray\n  ): void {\n    this.device.queue.copyExternalImageToTexture(\n      imageCopyExternalImage,\n      dstTextureCopyView,\n      copySize\n    );\n\n    const externalImage = imageCopyExternalImage.source;\n    const dstTexture = dstTextureCopyView.texture;\n\n    const bytesPerRow = align(externalImage.width * bytesPerPixel, kBytesPerRowAlignment);\n    const testBuffer = this.device.createBuffer({\n      size: bytesPerRow * externalImage.height,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const encoder = this.device.createCommandEncoder();\n\n    encoder.copyTextureToBuffer(\n      { texture: dstTexture, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n      { buffer: testBuffer, bytesPerRow },\n      { width: externalImage.width, height: externalImage.height, depthOrArrayLayers: 1 }\n    );\n    this.device.queue.submit([encoder.finish()]);\n\n    this.checkCopyExternalImageResult(\n      testBuffer,\n      expectedData,\n      externalImage.width,\n      externalImage.height,\n      bytesPerPixel\n    );\n  }\n}\n"],"file":"copyToTexture.js"}