{"version":3,"sources":["../../../../../src/webgpu/api/operation/compute/basic.spec.ts"],"names":["description","makeTestGroup","GPUTest","g","test","fn","t","data","Uint32Array","src","device","createBuffer","mappedAtCreation","size","usage","GPUBufferUsage","COPY_DST","STORAGE","getMappedRange","set","unmap","dst","COPY_SRC","pipeline","createComputePipeline","compute","module","createShaderModule","code","entryPoint","bg","createBindGroup","entries","binding","resource","buffer","offset","layout","getBindGroupLayout","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","queue","submit","finish","expectGPUBufferValuesEqual","desc","params","u","combine","beginSubcases","val","badVal","wgSize","workgroupSize","bufferSize","BYTES_PER_ELEMENT","dispatchSize","dims","largeDimension","wgSizes","expectSingleValueContents","destroy"],"mappings":"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","sourcesContent":["export const description = `\nBasic command buffer compute tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('memcpy').fn(async t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const src = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: 4,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n  new Uint32Array(src.getMappedRange()).set(data);\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n  });\n\n  const pipeline = t.device.createComputePipeline({\n    compute: {\n      module: t.device.createShaderModule({\n        code: `\n          [[block]] struct Data {\n              value : u32;\n          };\n\n          [[group(0), binding(0)]] var<storage, read> src : Data;\n          [[group(0), binding(1)]] var<storage, read_write> dst : Data;\n\n          [[stage(compute)]] fn main() {\n            dst.value = src.value;\n            return;\n          }\n        `,\n      }),\n      entryPoint: 'main',\n    },\n  });\n\n  const bg = t.device.createBindGroup({\n    entries: [\n      { binding: 0, resource: { buffer: src, offset: 0, size: 4 } },\n      { binding: 1, resource: { buffer: dst, offset: 0, size: 4 } },\n    ],\n    layout: pipeline.getBindGroupLayout(0),\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatch(1);\n  pass.endPass();\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(dst, data);\n});\n\ng.test('large_dispatch')\n  .desc(\n    `\nTODO: add query for the maximum dispatch size and test closer to those limits.\n\nTest reasonably-sized large dispatches (see also stress tests).\n`\n  )\n  .params(u =>\n    u\n      // Reasonably-sized powers of two, and some stranger larger sizes.\n      .combine('dispatchSize', [256, 512, 1024, 2048, 315, 628, 1053, 2179] as const)\n      // Test some reasonable workgroup sizes.\n      .combine('workgroupSize', [1, 2, 4, 8, 16, 32, 64] as const)\n      .beginSubcases()\n      // 0 == x axis; 1 == y axis; 2 == z axis.\n      .combine('largeDimension', [0, 1, 2] as const)\n  )\n  .fn(async t => {\n    // The output storage buffer is filled with this value.\n    const val = 0x01020304;\n    const badVal = 0xbaadf00d;\n    const data = new Uint32Array([val]);\n\n    const wgSize = t.params.workgroupSize;\n    const bufferSize = Uint32Array.BYTES_PER_ELEMENT * t.params.dispatchSize * wgSize;\n    const dst = t.device.createBuffer({\n      size: bufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n    });\n\n    // Only use one large dimension and workgroup size in the dispatch\n    // call to keep the size of the test reasonable.\n    const dims = [1, 1, 1];\n    dims[t.params.largeDimension] = t.params.dispatchSize;\n    const wgSizes = [1, 1, 1];\n    wgSizes[t.params.largeDimension] = t.params.workgroupSize;\n    const pipeline = t.device.createComputePipeline({\n      compute: {\n        module: t.device.createShaderModule({\n          code: `\n            [[block]] struct OutputBuffer {\n              value : array<u32>;\n            };\n\n            [[group(0), binding(0)]] var<storage, read_write> dst : OutputBuffer;\n\n            [[stage(compute), workgroup_size(${wgSizes[0]}, ${wgSizes[1]}, ${wgSizes[2]})]]\n            fn main(\n              [[builtin(global_invocation_id)]] GlobalInvocationID : vec3<u32>\n            ) {\n              var xExtent : u32 = ${dims[0]}u * ${wgSizes[0]}u;\n              var yExtent : u32 = ${dims[1]}u * ${wgSizes[1]}u;\n              var zExtent : u32 = ${dims[2]}u * ${wgSizes[2]}u;\n              var index : u32 = (\n                GlobalInvocationID.z * xExtent * yExtent +\n                GlobalInvocationID.y * xExtent +\n                GlobalInvocationID.x);\n              var val : u32 = ${val}u;\n              // Trivial error checking in the indexing and invocation.\n              if (GlobalInvocationID.x > xExtent ||\n                  GlobalInvocationID.y > yExtent ||\n                  GlobalInvocationID.z > zExtent) {\n                val = ${badVal}u;\n              }\n              dst.value[index] = val;\n            }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n    });\n\n    const bg = t.device.createBindGroup({\n      entries: [{ binding: 0, resource: { buffer: dst, offset: 0, size: bufferSize } }],\n      layout: pipeline.getBindGroupLayout(0),\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatch(dims[0], dims[1], dims[2]);\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSingleValueContents(dst, data, bufferSize);\n\n    dst.destroy();\n  });\n"],"file":"basic.spec.js"}