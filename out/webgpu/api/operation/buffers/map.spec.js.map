{"version":3,"sources":["../../../../../src/webgpu/api/operation/buffers/map.spec.ts"],"names":["description","makeTestGroup","assert","checkElementsEqual","MappingTest","g","kSubcases","size","range","undefined","reifyMapRange","bufferSize","offset","mapRegionBoundModes","getRegionForMap","mapAsyncRegionLeft","mapAsyncRegionRight","regionLeft","regionRight","test","desc","params","u","combine","beginSubcases","combineWithParams","fn","t","rangeOffset","rangeSize","buffer","device","createBuffer","usage","GPUBufferUsage","COPY_SRC","MAP_WRITE","mapRegion","mapAsync","GPUMapMode","WRITE","arrayBuffer","getMappedRange","checkMapWrite","mappedAtCreation","COPY_DST","MAP_READ","init","byteLength","expected","Uint32Array","ArrayBuffer","data","i","length","unmap","READ","actual","Uint8Array","expectOK","expectedArrayBuffer","uint8Expected","int8Expected","Int8Array","uint16Expected","Uint16Array","int16Expected","Int16Array","uint32Expected","int32Expected","Int32Array","float32Expected","Float32Array","float64Expected","Float64Array","Number","MAX_VALUE","MIN_VALUE","set","mappedArrayBuffer","mappable"],"mappings":"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","sourcesContent":["export const description = `\nTest the operation of buffer mapping, specifically the data contents written via\nmap-write/mappedAtCreation, and the contents of buffers returned by getMappedRange on\nbuffers which are mapped-read/mapped-write/mappedAtCreation.\n\nrange: used for getMappedRange\nmapRegion: used for mapAsync\n\nmapRegionBoundModes is used to get mapRegion from range:\n - default-expand: expand mapRegion to buffer bound by setting offset/size to undefined\n - explicit-expand: expand mapRegion to buffer bound by explicitly calculating offset/size\n - minimal: make mapRegion to be the same as range which is the minimal range to make getMappedRange input valid\n\nTODO: Test that ranges not written preserve previous contents.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { checkElementsEqual } from '../../../util/check_contents.js';\n\nimport { MappingTest } from './mapping_test.js';\n\nexport const g = makeTestGroup(MappingTest);\n\nconst kSubcases = [\n  { size: 0, range: [] },\n  { size: 0, range: [undefined] },\n  { size: 0, range: [undefined, undefined] },\n  { size: 0, range: [0] },\n  { size: 0, range: [0, undefined] },\n  { size: 0, range: [0, 0] },\n  { size: 12, range: [] },\n  { size: 12, range: [undefined] },\n  { size: 12, range: [undefined, undefined] },\n  { size: 12, range: [0] },\n  { size: 12, range: [0, undefined] },\n  { size: 12, range: [0, 12] },\n  { size: 12, range: [0, 0] },\n  { size: 12, range: [8] },\n  { size: 12, range: [8, undefined] },\n  { size: 12, range: [8, 4] },\n  { size: 28, range: [8, 8] },\n  { size: 28, range: [8, 12] },\n  { size: 512 * 1024, range: [] },\n] as const;\n\nfunction reifyMapRange(bufferSize: number, range: readonly [number?, number?]): [number, number] {\n  const offset = range[0] ?? 0;\n  return [offset, range[1] ?? bufferSize - offset];\n}\n\nconst mapRegionBoundModes = ['default-expand', 'explicit-expand', 'minimal'] as const;\ntype MapRegionBoundMode = typeof mapRegionBoundModes[number];\n\nfunction getRegionForMap(\n  bufferSize: number,\n  range: [number, number],\n  {\n    mapAsyncRegionLeft,\n    mapAsyncRegionRight,\n  }: {\n    mapAsyncRegionLeft: MapRegionBoundMode;\n    mapAsyncRegionRight: MapRegionBoundMode;\n  }\n) {\n  const regionLeft = mapAsyncRegionLeft === 'minimal' ? range[0] : 0;\n  const regionRight = mapAsyncRegionRight === 'minimal' ? range[0] + range[1] : bufferSize;\n  return [\n    mapAsyncRegionLeft === 'default-expand' ? undefined : regionLeft,\n    mapAsyncRegionRight === 'default-expand' ? undefined : regionRight - regionLeft,\n  ] as const;\n}\n\ng.test('mapAsync,write')\n  .desc(\n    `Use map-write to write to various ranges of variously-sized buffers, then expectContents\n(which does copyBufferToBuffer + map-read) to ensure the contents were written.`\n  )\n  .params(u =>\n    u\n      .combine('mapAsyncRegionLeft', mapRegionBoundModes)\n      .combine('mapAsyncRegionRight', mapRegionBoundModes)\n      .beginSubcases()\n      .combineWithParams(kSubcases)\n  )\n  .fn(async t => {\n    const { size, range } = t.params;\n    const [rangeOffset, rangeSize] = reifyMapRange(size, range);\n\n    const buffer = t.device.createBuffer({\n      size,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE,\n    });\n\n    const mapRegion = getRegionForMap(size, [rangeOffset, rangeSize], t.params);\n    await buffer.mapAsync(GPUMapMode.WRITE, ...mapRegion);\n    const arrayBuffer = buffer.getMappedRange(...range);\n    t.checkMapWrite(buffer, rangeOffset, arrayBuffer, rangeSize);\n  });\n\ng.test('mapAsync,read')\n  .desc(\n    `Use mappedAtCreation to initialize various ranges of variously-sized buffers, then\nmap-read and check the read-back result.`\n  )\n  .params(u =>\n    u\n      .combine('mapAsyncRegionLeft', mapRegionBoundModes)\n      .combine('mapAsyncRegionRight', mapRegionBoundModes)\n      .beginSubcases()\n      .combineWithParams(kSubcases)\n  )\n  .fn(async t => {\n    const { size, range } = t.params;\n    const [rangeOffset, rangeSize] = reifyMapRange(size, range);\n\n    const buffer = t.device.createBuffer({\n      mappedAtCreation: true,\n      size,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n    const init = buffer.getMappedRange(...range);\n\n    assert(init.byteLength === rangeSize);\n    const expected = new Uint32Array(new ArrayBuffer(rangeSize));\n    const data = new Uint32Array(init);\n    for (let i = 0; i < data.length; ++i) {\n      data[i] = expected[i] = i + 1;\n    }\n    buffer.unmap();\n\n    const mapRegion = getRegionForMap(size, [rangeOffset, rangeSize], t.params);\n    await buffer.mapAsync(GPUMapMode.READ, ...mapRegion);\n    const actual = new Uint8Array(buffer.getMappedRange(...range));\n    t.expectOK(checkElementsEqual(actual, new Uint8Array(expected.buffer)));\n  });\n\ng.test('mapAsync,read,typedArrayAccess')\n  .desc(`Use various TypedArray types to read back from a mapped buffer`)\n  .params(u =>\n    u\n      .combine('mapAsyncRegionLeft', mapRegionBoundModes)\n      .combine('mapAsyncRegionRight', mapRegionBoundModes)\n      .beginSubcases()\n      .combineWithParams([\n        { size: 80, range: [] },\n        { size: 160, range: [] },\n        { size: 160, range: [0, 80] },\n        { size: 160, range: [80] },\n        { size: 160, range: [40, 120] },\n        { size: 160, range: [40] },\n      ] as const)\n  )\n  .fn(async t => {\n    const { size, range } = t.params;\n    const [rangeOffset, rangeSize] = reifyMapRange(size, range);\n\n    // Fill an array buffer with a variety of values of different types.\n    const expectedArrayBuffer = new ArrayBuffer(80);\n    const uint8Expected = new Uint8Array(expectedArrayBuffer, 0, 2);\n    uint8Expected[0] = 1;\n    uint8Expected[1] = 255;\n\n    const int8Expected = new Int8Array(expectedArrayBuffer, 2, 2);\n    int8Expected[0] = -1;\n    int8Expected[1] = 127;\n\n    const uint16Expected = new Uint16Array(expectedArrayBuffer, 4, 2);\n    uint16Expected[0] = 1;\n    uint16Expected[1] = 65535;\n\n    const int16Expected = new Int16Array(expectedArrayBuffer, 8, 2);\n    int16Expected[0] = -1;\n    int16Expected[1] = 32767;\n\n    const uint32Expected = new Uint32Array(expectedArrayBuffer, 12, 2);\n    uint32Expected[0] = 1;\n    uint32Expected[1] = 4294967295;\n\n    const int32Expected = new Int32Array(expectedArrayBuffer, 20, 2);\n    int32Expected[2] = -1;\n    int32Expected[3] = 2147483647;\n\n    const float32Expected = new Float32Array(expectedArrayBuffer, 28, 3);\n    float32Expected[0] = 1;\n    float32Expected[1] = -1;\n    float32Expected[2] = 12345.6789;\n\n    const float64Expected = new Float64Array(expectedArrayBuffer, 40, 5);\n    float64Expected[0] = 1;\n    float64Expected[1] = -1;\n    float64Expected[2] = 12345.6789;\n    float64Expected[3] = Number.MAX_VALUE;\n    float64Expected[4] = Number.MIN_VALUE;\n\n    const buffer = t.device.createBuffer({\n      mappedAtCreation: true,\n      size,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n    const init = buffer.getMappedRange(...range);\n\n    // Copy the expected values into the mapped range.\n    assert(init.byteLength === rangeSize);\n    const data = new Uint8Array(init);\n    data.set(new Uint8Array(expectedArrayBuffer));\n    buffer.unmap();\n\n    const mapRegion = getRegionForMap(size, [rangeOffset, rangeSize], t.params);\n    await buffer.mapAsync(GPUMapMode.READ, ...mapRegion);\n    const mappedArrayBuffer = buffer.getMappedRange(...range);\n    t.expectOK(checkElementsEqual(new Uint8Array(mappedArrayBuffer, 0, 2), uint8Expected));\n    t.expectOK(checkElementsEqual(new Int8Array(mappedArrayBuffer, 2, 2), int8Expected));\n    t.expectOK(checkElementsEqual(new Uint16Array(mappedArrayBuffer, 4, 2), uint16Expected));\n    t.expectOK(checkElementsEqual(new Int16Array(mappedArrayBuffer, 8, 2), int16Expected));\n    t.expectOK(checkElementsEqual(new Uint32Array(mappedArrayBuffer, 12, 2), uint32Expected));\n    t.expectOK(checkElementsEqual(new Int32Array(mappedArrayBuffer, 20, 2), int32Expected));\n    t.expectOK(checkElementsEqual(new Float32Array(mappedArrayBuffer, 28, 3), float32Expected));\n    t.expectOK(checkElementsEqual(new Float64Array(mappedArrayBuffer, 40, 5), float64Expected));\n  });\n\ng.test('mappedAtCreation')\n  .desc(\n    `Use mappedAtCreation to write to various ranges of variously-sized buffers created either\nwith or without the MAP_WRITE usage (since this could affect the mappedAtCreation upload path),\nthen expectContents (which does copyBufferToBuffer + map-read) to ensure the contents were written.`\n  )\n  .params(u =>\n    u //\n      .combine('mappable', [false, true])\n      .beginSubcases()\n      .combineWithParams(kSubcases)\n  )\n  .fn(async t => {\n    const { size, range, mappable } = t.params;\n    const [, rangeSize] = reifyMapRange(size, range);\n\n    const buffer = t.device.createBuffer({\n      mappedAtCreation: true,\n      size,\n      usage: GPUBufferUsage.COPY_SRC | (mappable ? GPUBufferUsage.MAP_WRITE : 0),\n    });\n    const arrayBuffer = buffer.getMappedRange(...range);\n    t.checkMapWrite(buffer, range[0] ?? 0, arrayBuffer, rangeSize);\n  });\n\ng.test('remapped_for_write')\n  .desc(\n    `Use mappedAtCreation or mapAsync to write to various ranges of variously-sized buffers created\nwith the MAP_WRITE usage, then mapAsync again and ensure that the previously written values are\nstill present in the mapped buffer.`\n  )\n  .params(u =>\n    u //\n      .combine('mapAsyncRegionLeft', mapRegionBoundModes)\n      .combine('mapAsyncRegionRight', mapRegionBoundModes)\n      .beginSubcases()\n      .combine('mappedAtCreation', [false, true])\n      .combineWithParams(kSubcases)\n  )\n  .fn(async t => {\n    const { size, range, mappedAtCreation } = t.params;\n    const [rangeOffset, rangeSize] = reifyMapRange(size, range);\n\n    const buffer = t.device.createBuffer({\n      mappedAtCreation,\n      size,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE,\n    });\n\n    // If the buffer is not mappedAtCreation map it now.\n    if (!mappedAtCreation) {\n      await buffer.mapAsync(GPUMapMode.WRITE);\n    }\n\n    // Set the initial contents of the buffer.\n    const init = buffer.getMappedRange(...range);\n\n    assert(init.byteLength === rangeSize);\n    const expected = new Uint32Array(new ArrayBuffer(rangeSize));\n    const data = new Uint32Array(init);\n    for (let i = 0; i < data.length; ++i) {\n      data[i] = expected[i] = i + 1;\n    }\n    buffer.unmap();\n\n    // Check that upon remapping the for WRITE the values in the buffer are\n    // still the same.\n    const mapRegion = getRegionForMap(size, [rangeOffset, rangeSize], t.params);\n    await buffer.mapAsync(GPUMapMode.WRITE, ...mapRegion);\n    const actual = new Uint8Array(buffer.getMappedRange(...range));\n    t.expectOK(checkElementsEqual(actual, new Uint8Array(expected.buffer)));\n  });\n"],"file":"map.spec.js"}