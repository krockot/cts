{"version":3,"sources":["../../src/webgpu/capability_info.ts"],"names":["assertTypeTrue","assert","unreachable","GPUConst","keysOf","obj","Object","keys","numericKeysOf","map","n","Number","makeTable","members","defaults","table","result","k","v","entries","item","i","length","kMaxQueryCount","kQueryTypeInfo","feature","undefined","kQueryTypes","kBufferSizeAlignment","kBufferUsageInfo","BufferUsage","MAP_READ","MAP_WRITE","COPY_SRC","COPY_DST","INDEX","VERTEX","UNIFORM","STORAGE","INDIRECT","QUERY_RESOLVE","kBufferUsages","kRegularTextureFormatInfo","kTexFmtInfoHeader","kSizedDepthStencilFormatInfo","kUnsizedDepthStencilFormatInfo","kCompressedTextureFormatInfo","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kCompressedTextureFormats","kColorTextureFormatInfo","kColorTextureFormats","kEncodableTextureFormatInfo","kEncodableTextureFormats","kSizedTextureFormatInfo","kSizedTextureFormats","kDepthStencilFormatInfo","kDepthStencilFormats","kUncompressedTextureFormatInfo","kUncompressedTextureFormats","kAllTextureFormatInfo","kAllTextureFormats","x","kValidTextureFormatsForCopyIB2T","kTextureDimensionInfo","kTextureDimensions","kTextureAspectInfo","kTextureAspects","kDepthStencilFormatCapabilityInBufferTextureCopy","depth24plus","CopyB2T","CopyT2B","texelAspectSize","depth16unorm","depth32float","stencil8","depthStencilBufferTextureCopySupported","type","format","aspect","supportedAspects","includes","depthStencilFormatAspectSize","textureDimensionAndFormatCompatible","dimension","info","blockWidth","depth","stencil","kTextureUsageInfo","TextureUsage","SAMPLED","RENDER_ATTACHMENT","kTextureUsages","kTextureViewDimensionInfo","storage","kTextureViewDimensions","kVertexFormatInfo","kVertexFormats","kBindableResources","kMinDynamicBufferOffsetAlignment","kMaxBindingsPerBindGroup","kPerStageBindingLimits","class","max","kPerPipelineBindingLimits","maxDynamic","kBindingKind","uniformBuf","resource","perStageLimitClass","perPipelineLimitClass","storageBuf","filtSamp","sampler","nonFiltSamp","compareSamp","sampledTex","sampledTexMS","storageTex","kValidStagesAll","validStages","ShaderStage","FRAGMENT","COMPUTE","kValidStagesStorageWrite","bufferBindingTypeInfo","d","usage","kBufferBindingTypes","samplerBindingTypeInfo","kSamplerBindingTypes","sampledTextureBindingTypeInfo","multisampled","kTextureSampleTypes","storageTextureBindingTypeInfo","access","kStorageTextureAccessValues","texBindingTypeInfo","e","texture","storageTexture","bindingTypeInfo","buffer","bufferBindingEntries","includeUndefined","samplerBindingEntries","textureBindingEntries","storageTextureBindingEntries","sampledAndStorageBindingEntries","storageTextureFormat","allBindingEntries","kShaderStages","kShaderStageCombinations","kTextureSampleCounts","kMaxColorAttachments","kMaxVertexBuffers","kMaxVertexAttributes","kMaxVertexBufferArrayStride"],"mappings":"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","sourcesContent":["/* eslint-disable no-sparse-arrays */\nimport { assertTypeTrue, ResolveType, TypeEqual, ZipKeysWithValues } from '../common/util/types.js';\nimport { assert, unreachable } from '../common/util/util.js';\n\nimport { GPUConst } from './constants.js';\n\ntype valueof<K> = K[keyof K];\n\nfunction keysOf<T extends string>(obj: { [k in T]: unknown }): readonly T[] {\n  return (Object.keys(obj) as unknown[]) as T[];\n}\n\nfunction numericKeysOf<T>(obj: object): readonly T[] {\n  return (Object.keys(obj).map(n => Number(n)) as unknown[]) as T[];\n}\n\n/**\n * Creates an info lookup object from a more nicely-formatted table. See below for examples.\n *\n * Note: Using `as const` on the arguments to this function is necessary to infer the correct type.\n */\nfunction makeTable<\n  Members extends readonly string[],\n  Defaults extends readonly unknown[],\n  Table extends { readonly [k: string]: readonly unknown[] }\n>(\n  members: Members,\n  defaults: Defaults,\n  table: Table\n): {\n  readonly [k in keyof Table]: ResolveType<ZipKeysWithValues<Members, Table[k], Defaults>>;\n} {\n  const result: { [k: string]: { [m: string]: unknown } } = {};\n  for (const [k, v] of Object.entries<readonly unknown[]>(table)) {\n    const item: { [m: string]: unknown } = {};\n    for (let i = 0; i < members.length; ++i) {\n      item[members[i]] = v[i] ?? defaults[i];\n    }\n    result[k] = item;\n  }\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  return result as any;\n}\n\n// Queries\n\nexport const kMaxQueryCount = 8192;\nexport const kQueryTypeInfo: {\n  readonly [k in GPUQueryType]: {\n    readonly feature: GPUFeatureName | undefined;\n  };\n} = /* prettier-ignore */ {\n  // Occlusion query does not require any features.\n  'occlusion':           { feature:  undefined },\n  'pipeline-statistics': { feature: 'pipeline-statistics-query' },\n  'timestamp':           { feature: 'timestamp-query' },\n};\nexport const kQueryTypes = keysOf(kQueryTypeInfo);\n\n// Buffers\n\nexport const kBufferSizeAlignment = 4;\n\nexport const kBufferUsageInfo: {\n  readonly [k in valueof<typeof GPUConst.BufferUsage>]: {};\n} = /* prettier-ignore */ {\n  [GPUConst.BufferUsage.MAP_READ]:      {},\n  [GPUConst.BufferUsage.MAP_WRITE]:     {},\n  [GPUConst.BufferUsage.COPY_SRC]:      {},\n  [GPUConst.BufferUsage.COPY_DST]:      {},\n  [GPUConst.BufferUsage.INDEX]:         {},\n  [GPUConst.BufferUsage.VERTEX]:        {},\n  [GPUConst.BufferUsage.UNIFORM]:       {},\n  [GPUConst.BufferUsage.STORAGE]:       {},\n  [GPUConst.BufferUsage.INDIRECT]:      {},\n  [GPUConst.BufferUsage.QUERY_RESOLVE]: {},\n};\nexport const kBufferUsages = numericKeysOf<GPUBufferUsageFlags>(kBufferUsageInfo);\n\n// Textures\n\n// Note that we repeat the header multiple times in order to make it easier to read.\nexport const kRegularTextureFormatInfo = /* prettier-ignore */ makeTable(\n                           ['renderable', 'multisample', 'color', 'depth', 'stencil', 'storage', 'copySrc', 'copyDst', 'bytesPerBlock', 'blockWidth', 'blockHeight',                'feature'] as const,\n                           [            ,              ,    true,   false,     false,          ,      true,      true,                ,            1,             1,                         ] as const, {\n  // 8-bit formats\n  'r8unorm':               [        true,          true,        ,        ,          ,     false,          ,          ,               1],\n  'r8snorm':               [       false,         false,        ,        ,          ,     false,          ,          ,               1],\n  'r8uint':                [        true,          true,        ,        ,          ,     false,          ,          ,               1],\n  'r8sint':                [        true,          true,        ,        ,          ,     false,          ,          ,               1],\n  // 16-bit formats\n  'r16uint':               [        true,          true,        ,        ,          ,     false,          ,          ,               2],\n  'r16sint':               [        true,          true,        ,        ,          ,     false,          ,          ,               2],\n  'r16float':              [        true,          true,        ,        ,          ,     false,          ,          ,               2],\n  'rg8unorm':              [        true,          true,        ,        ,          ,     false,          ,          ,               2],\n  'rg8snorm':              [       false,         false,        ,        ,          ,     false,          ,          ,               2],\n  'rg8uint':               [        true,          true,        ,        ,          ,     false,          ,          ,               2],\n  'rg8sint':               [        true,          true,        ,        ,          ,     false,          ,          ,               2],\n  // 32-bit formats\n  'r32uint':               [        true,          true,        ,        ,          ,      true,          ,          ,               4],\n  'r32sint':               [        true,          true,        ,        ,          ,      true,          ,          ,               4],\n  'r32float':              [        true,          true,        ,        ,          ,      true,          ,          ,               4],\n  'rg16uint':              [        true,          true,        ,        ,          ,     false,          ,          ,               4],\n  'rg16sint':              [        true,          true,        ,        ,          ,     false,          ,          ,               4],\n  'rg16float':             [        true,          true,        ,        ,          ,     false,          ,          ,               4],\n  'rgba8unorm':            [        true,          true,        ,        ,          ,      true,          ,          ,               4],\n  'rgba8unorm-srgb':       [        true,          true,        ,        ,          ,     false,          ,          ,               4],\n  'rgba8snorm':            [       false,         false,        ,        ,          ,      true,          ,          ,               4],\n  'rgba8uint':             [        true,          true,        ,        ,          ,      true,          ,          ,               4],\n  'rgba8sint':             [        true,          true,        ,        ,          ,      true,          ,          ,               4],\n  'bgra8unorm':            [        true,          true,        ,        ,          ,     false,          ,          ,               4],\n  'bgra8unorm-srgb':       [        true,          true,        ,        ,          ,     false,          ,          ,               4],\n  // Packed 32-bit formats\n  'rgb10a2unorm':          [        true,          true,        ,        ,          ,     false,          ,          ,               4],\n  'rg11b10ufloat':         [       false,         false,        ,        ,          ,     false,          ,          ,               4],\n  'rgb9e5ufloat':          [       false,         false,        ,        ,          ,     false,          ,          ,               4],\n  // 64-bit formats\n  'rg32uint':              [        true,          true,        ,        ,          ,      true,          ,          ,               8],\n  'rg32sint':              [        true,          true,        ,        ,          ,      true,          ,          ,               8],\n  'rg32float':             [        true,          true,        ,        ,          ,      true,          ,          ,               8],\n  'rgba16uint':            [        true,          true,        ,        ,          ,      true,          ,          ,               8],\n  'rgba16sint':            [        true,          true,        ,        ,          ,      true,          ,          ,               8],\n  'rgba16float':           [        true,          true,        ,        ,          ,      true,          ,          ,               8],\n  // 128-bit formats\n  'rgba32uint':            [        true,          true,        ,        ,          ,      true,          ,          ,              16],\n  'rgba32sint':            [        true,          true,        ,        ,          ,      true,          ,          ,              16],\n  'rgba32float':           [        true,          true,        ,        ,          ,      true,          ,          ,              16],\n} as const);\n/* prettier-ignore */\nconst kTexFmtInfoHeader =  ['renderable', 'multisample', 'color', 'depth', 'stencil', 'storage', 'copySrc', 'copyDst', 'bytesPerBlock', 'blockWidth', 'blockHeight',                'feature'] as const;\nexport const kSizedDepthStencilFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [        true,          true,   false,        ,          ,     false,     false,     false,                ,            1,             1,                         ] as const, {\n  'depth32float':          [            ,              ,        ,    true,     false,          ,          ,          ,               4],\n  'depth16unorm':          [            ,              ,        ,    true,     false,          ,          ,          ,               2],\n  'stencil8':              [            ,              ,        ,   false,      true,          ,          ,          ,               1],\n} as const);\nexport const kUnsizedDepthStencilFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [        true,          true,   false,        ,          ,     false,     false,     false,       undefined,            1,             1,                         ] as const, {\n  'depth24plus':           [            ,              ,        ,    true,     false,          ,          ,          ],\n  'depth24plus-stencil8':  [            ,              ,        ,    true,      true,          ,          ,          ],\n  // bytesPerBlock only makes sense on a per-aspect basis. But this table can't express that. So we put depth24unorm-stencil8 and depth32float-stencil8 to be unsized formats for now.\n  'depth24unorm-stencil8': [            ,              ,        ,    true,      true,          ,          ,          ,                ,             ,              ,  'depth24unorm-stencil8'],\n  'depth32float-stencil8': [            ,              ,        ,    true,      true,          ,          ,          ,                ,             ,              ,  'depth32float-stencil8'],\n} as const);\nexport const kCompressedTextureFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [       false,         false,    true,   false,     false,     false,      true,      true,                ,            4,             4,                         ] as const, {\n  'bc1-rgba-unorm':        [            ,              ,        ,        ,          ,          ,          ,          ,               8,            4,             4, 'texture-compression-bc'],\n  'bc1-rgba-unorm-srgb':   [            ,              ,        ,        ,          ,          ,          ,          ,               8,            4,             4, 'texture-compression-bc'],\n  'bc2-rgba-unorm':        [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc2-rgba-unorm-srgb':   [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc3-rgba-unorm':        [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc3-rgba-unorm-srgb':   [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc4-r-unorm':           [            ,              ,        ,        ,          ,          ,          ,          ,               8,            4,             4, 'texture-compression-bc'],\n  'bc4-r-snorm':           [            ,              ,        ,        ,          ,          ,          ,          ,               8,            4,             4, 'texture-compression-bc'],\n  'bc5-rg-unorm':          [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc5-rg-snorm':          [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc6h-rgb-ufloat':       [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc6h-rgb-float':        [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc7-rgba-unorm':        [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc7-rgba-unorm-srgb':   [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n} as const);\n\nexport type RegularTextureFormat = keyof typeof kRegularTextureFormatInfo;\nexport type SizedDepthStencilFormat = keyof typeof kSizedDepthStencilFormatInfo;\nexport type UnsizedDepthStencilFormat = keyof typeof kUnsizedDepthStencilFormatInfo;\nexport type CompressedTextureFormat = keyof typeof kCompressedTextureFormatInfo;\n\nexport const kRegularTextureFormats = keysOf(kRegularTextureFormatInfo);\nexport const kSizedDepthStencilFormats = keysOf(kSizedDepthStencilFormatInfo);\nexport const kUnsizedDepthStencilFormats = keysOf(kUnsizedDepthStencilFormatInfo);\nexport const kCompressedTextureFormats = keysOf(kCompressedTextureFormatInfo);\n\nexport const kColorTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kCompressedTextureFormatInfo,\n} as const;\nexport type ColorTextureFormat = keyof typeof kColorTextureFormatInfo;\nexport const kColorTextureFormats = keysOf(kColorTextureFormatInfo);\n\nexport const kEncodableTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n} as const;\nexport type EncodableTextureFormat = keyof typeof kEncodableTextureFormatInfo;\nexport const kEncodableTextureFormats = keysOf(kEncodableTextureFormatInfo);\n\nexport const kSizedTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n  ...kCompressedTextureFormatInfo,\n} as const;\nexport type SizedTextureFormat = keyof typeof kSizedTextureFormatInfo;\nexport const kSizedTextureFormats = keysOf(kSizedTextureFormatInfo);\n\nexport const kDepthStencilFormatInfo = {\n  ...kSizedDepthStencilFormatInfo,\n  ...kUnsizedDepthStencilFormatInfo,\n} as const;\nexport type DepthStencilFormat = keyof typeof kDepthStencilFormatInfo;\nexport const kDepthStencilFormats = keysOf(kDepthStencilFormatInfo);\n\nexport const kUncompressedTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n  ...kUnsizedDepthStencilFormatInfo,\n} as const;\nexport type UncompressedTextureFormat = keyof typeof kUncompressedTextureFormatInfo;\nexport const kUncompressedTextureFormats = keysOf(kUncompressedTextureFormatInfo);\n\nexport const kAllTextureFormatInfo = {\n  ...kUncompressedTextureFormatInfo,\n  ...kCompressedTextureFormatInfo,\n} as const;\nexport const kAllTextureFormats = keysOf(kAllTextureFormatInfo);\n// Assert every GPUTextureFormat is covered by one of the tables.\n((x: { readonly [k in GPUTextureFormat]: {} }) => x)(kAllTextureFormatInfo);\n\n// From spec\nexport const kValidTextureFormatsForCopyIB2T = [\n  'rgba8unorm',\n  'rgba8unorm-srgb',\n  'bgra8unorm',\n  'bgra8unorm-srgb',\n  'rgb10a2unorm',\n  'rg8unorm',\n] as const;\n\nexport const kTextureDimensionInfo: {\n  readonly [k in GPUTextureDimension]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  '1d': {},\n  '2d': {},\n  '3d': {},\n};\nexport const kTextureDimensions = keysOf(kTextureDimensionInfo);\n\nexport const kTextureAspectInfo: {\n  readonly [k in GPUTextureAspect]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'all': {},\n  'depth-only': {},\n  'stencil-only': {},\n};\nexport const kTextureAspects = keysOf(kTextureAspectInfo);\n\nconst kDepthStencilFormatCapabilityInBufferTextureCopy = {\n  // kUnsizedDepthStencilFormats\n  depth24plus: {\n    CopyB2T: [],\n    CopyT2B: [],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': -1 },\n  },\n  'depth24plus-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n\n  // kSizedDepthStencilFormats\n  depth16unorm: {\n    CopyB2T: ['all', 'depth-only'],\n    CopyT2B: ['all', 'depth-only'],\n    texelAspectSize: { 'depth-only': 2, 'stencil-only': -1 },\n  },\n  depth32float: {\n    CopyB2T: [],\n    CopyT2B: ['all', 'depth-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': -1 },\n  },\n  'depth24unorm-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['depth-only', 'stencil-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': 1 },\n  },\n  'depth32float-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['depth-only', 'stencil-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': 1 },\n  },\n  stencil8: {\n    CopyB2T: ['all', 'stencil-only'],\n    CopyT2B: ['all', 'stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n} as const;\n\nexport function depthStencilBufferTextureCopySupported(\n  type: 'CopyB2T' | 'CopyT2B',\n  format: DepthStencilFormat,\n  aspect: GPUTextureAspect\n): boolean {\n  const supportedAspects: readonly GPUTextureAspect[] =\n    kDepthStencilFormatCapabilityInBufferTextureCopy[format][type];\n  return supportedAspects.includes(aspect);\n}\n\nexport function depthStencilFormatAspectSize(\n  format: DepthStencilFormat,\n  aspect: 'depth-only' | 'stencil-only'\n) {\n  const texelAspectSize =\n    kDepthStencilFormatCapabilityInBufferTextureCopy[format].texelAspectSize[aspect];\n  assert(texelAspectSize > 0);\n  return texelAspectSize;\n}\n\nexport function textureDimensionAndFormatCompatible(\n  dimension: undefined | GPUTextureDimension,\n  format: GPUTextureFormat\n): boolean {\n  const info = kAllTextureFormatInfo[format];\n  return !(\n    (dimension === '1d' || dimension === '3d') &&\n    (info.blockWidth > 1 || info.depth || info.stencil)\n  );\n}\n\nexport const kTextureUsageInfo: {\n  readonly [k in valueof<typeof GPUConst.TextureUsage>]: {};\n} = {\n  [GPUConst.TextureUsage.COPY_SRC]: {},\n  [GPUConst.TextureUsage.COPY_DST]: {},\n  [GPUConst.TextureUsage.SAMPLED]: {},\n  [GPUConst.TextureUsage.STORAGE]: {},\n  [GPUConst.TextureUsage.RENDER_ATTACHMENT]: {},\n};\nexport const kTextureUsages = numericKeysOf<GPUTextureUsageFlags>(kTextureUsageInfo);\n\n// Texture View\n\nexport const kTextureViewDimensionInfo: {\n  readonly [k in GPUTextureViewDimension]: {\n    readonly storage: boolean;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  '1d':         { storage: true  },\n  '2d':         { storage: true  },\n  '2d-array':   { storage: true  },\n  'cube':       { storage: false },\n  'cube-array': { storage: false },\n  '3d':         { storage: true  },\n};\nexport const kTextureViewDimensions = keysOf(kTextureViewDimensionInfo);\n\n// Vertex formats\n\nexport const kVertexFormatInfo = /* prettier-ignore */ makeTable(\n               ['bytesPerComponent',  'type', 'componentCount'] as const,\n               [                   ,        ,                 ] as const, {\n  // 8 bit components\n  'uint8x2':   [                  1,  'uint',                2],\n  'uint8x4':   [                  1,  'uint',                4],\n  'sint8x2':   [                  1,  'sint',                2],\n  'sint8x4':   [                  1,  'sint',                4],\n  'unorm8x2':  [                  1, 'unorm',                2],\n  'unorm8x4':  [                  1, 'unorm',                4],\n  'snorm8x2':  [                  1, 'snorm',                2],\n  'snorm8x4':  [                  1, 'snorm',                4],\n  // 16 bit components\n  'uint16x2':  [                  2,  'uint',                2],\n  'uint16x4':  [                  2,  'uint',                4],\n  'sint16x2':  [                  2,  'sint',                2],\n  'sint16x4':  [                  2,  'sint',                4],\n  'unorm16x2': [                  2, 'unorm',                2],\n  'unorm16x4': [                  2, 'unorm',                4],\n  'snorm16x2': [                  2, 'snorm',                2],\n  'snorm16x4': [                  2, 'snorm',                4],\n  'float16x2': [                  2, 'float',                2],\n  'float16x4': [                  2, 'float',                4],\n  // 32 bit components\n  'float32':   [                  4, 'float',                1],\n  'float32x2': [                  4, 'float',                2],\n  'float32x3': [                  4, 'float',                3],\n  'float32x4': [                  4, 'float',                4],\n  'uint32':    [                  4,  'uint',                1],\n  'uint32x2':  [                  4,  'uint',                2],\n  'uint32x3':  [                  4,  'uint',                3],\n  'uint32x4':  [                  4,  'uint',                4],\n  'sint32':    [                  4,  'sint',                1],\n  'sint32x2':  [                  4,  'sint',                2],\n  'sint32x3':  [                  4,  'sint',                3],\n  'sint32x4':  [                  4,  'sint',                4]\n} as const);\nexport type VertexFormat = keyof typeof kVertexFormatInfo;\nexport const kVertexFormats = keysOf(kVertexFormatInfo);\n\n// Typedefs for bindings\n\nexport type PerStageBindingLimitClass =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'sampler'\n  | 'sampledTex'\n  | 'storageTex';\nexport type PerPipelineBindingLimitClass = PerStageBindingLimitClass;\n\ntype ValidBindableResource =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'filtSamp'\n  | 'nonFiltSamp'\n  | 'compareSamp'\n  | 'sampledTex'\n  | 'sampledTexMS'\n  | 'storageTex';\ntype ErrorBindableResource = 'errorBuf' | 'errorSamp' | 'errorTex';\n\nexport type BindableResource = ValidBindableResource | ErrorBindableResource;\nexport const kBindableResources = [\n  'uniformBuf',\n  'storageBuf',\n  'filtSamp',\n  'nonFiltSamp',\n  'compareSamp',\n  'sampledTex',\n  'sampledTexMS',\n  'storageTex',\n  'errorBuf',\n  'errorSamp',\n  'errorTex',\n] as const;\nassertTypeTrue<TypeEqual<BindableResource, typeof kBindableResources[number]>>();\n\n// Bindings\n\n// Dynamic buffer offsets require offset to be divisible by 256\nexport const kMinDynamicBufferOffsetAlignment = 256;\n\nexport const kMaxBindingsPerBindGroup = 16;\n\nexport const kPerStageBindingLimits: {\n  readonly [k in PerStageBindingLimitClass]: {\n    readonly class: k;\n    readonly max: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', max: 12, },\n  'storageBuf': { class: 'storageBuf', max:  8, },\n  'sampler':    { class: 'sampler',    max: 16, },\n  'sampledTex': { class: 'sampledTex', max: 16, },\n  'storageTex': { class: 'storageTex', max:  8, },\n};\n\nexport const kPerPipelineBindingLimits: {\n  readonly [k in PerPipelineBindingLimitClass]: {\n    readonly class: k;\n    readonly maxDynamic: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', maxDynamic: 8, },\n  'storageBuf': { class: 'storageBuf', maxDynamic: 4, },\n  'sampler':    { class: 'sampler',    maxDynamic: 0, },\n  'sampledTex': { class: 'sampledTex', maxDynamic: 0, },\n  'storageTex': { class: 'storageTex', maxDynamic: 0, },\n};\n\ninterface BindingKindInfo {\n  readonly resource: ValidBindableResource;\n  readonly perStageLimitClass: typeof kPerStageBindingLimits[PerStageBindingLimitClass];\n  readonly perPipelineLimitClass: typeof kPerPipelineBindingLimits[PerPipelineBindingLimitClass];\n  // Add fields as needed\n}\n\nconst kBindingKind: {\n  readonly [k in ValidBindableResource]: BindingKindInfo;\n} = /* prettier-ignore */ {\n  uniformBuf:   { resource: 'uniformBuf',   perStageLimitClass: kPerStageBindingLimits.uniformBuf, perPipelineLimitClass: kPerPipelineBindingLimits.uniformBuf, },\n  storageBuf:   { resource: 'storageBuf',   perStageLimitClass: kPerStageBindingLimits.storageBuf, perPipelineLimitClass: kPerPipelineBindingLimits.storageBuf, },\n  filtSamp:     { resource: 'filtSamp',     perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  nonFiltSamp:  { resource: 'nonFiltSamp',  perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  compareSamp:  { resource: 'compareSamp',  perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  sampledTex:   { resource: 'sampledTex',   perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  sampledTexMS: { resource: 'sampledTexMS', perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  storageTex:   { resource: 'storageTex',   perStageLimitClass: kPerStageBindingLimits.storageTex, perPipelineLimitClass: kPerPipelineBindingLimits.storageTex, },\n};\n\n// Binding type info\n\nconst kValidStagesAll = {\n  validStages:\n    GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n} as const;\nconst kValidStagesStorageWrite = {\n  validStages: GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n} as const;\n\nexport function bufferBindingTypeInfo(d: GPUBufferBindingLayout) {\n  /* prettier-ignore */\n  switch (d.type ?? 'uniform') {\n    case 'uniform':           return { usage: GPUConst.BufferUsage.UNIFORM, ...kBindingKind.uniformBuf,  ...kValidStagesAll,          };\n    case 'storage':           return { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesStorageWrite, };\n    case 'read-only-storage': return { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesAll,          };\n  }\n}\nexport const kBufferBindingTypes = ['uniform', 'storage', 'read-only-storage'] as const;\nassertTypeTrue<TypeEqual<GPUBufferBindingType, typeof kBufferBindingTypes[number]>>();\n\nexport function samplerBindingTypeInfo(d: GPUSamplerBindingLayout) {\n  /* prettier-ignore */\n  switch (d.type ?? 'filtering') {\n    case 'filtering':     return { ...kBindingKind.filtSamp,    ...kValidStagesAll, };\n    case 'non-filtering': return { ...kBindingKind.nonFiltSamp, ...kValidStagesAll, };\n    case 'comparison':    return { ...kBindingKind.compareSamp, ...kValidStagesAll, };\n  }\n}\nexport const kSamplerBindingTypes = ['filtering', 'non-filtering', 'comparison'] as const;\nassertTypeTrue<TypeEqual<GPUSamplerBindingType, typeof kSamplerBindingTypes[number]>>();\n\nexport function sampledTextureBindingTypeInfo(d: GPUTextureBindingLayout) {\n  /* prettier-ignore */\n  if (d.multisampled) {\n    return { usage: GPUConst.TextureUsage.SAMPLED, ...kBindingKind.sampledTexMS, ...kValidStagesAll, };\n  } else {\n    return { usage: GPUConst.TextureUsage.SAMPLED, ...kBindingKind.sampledTex,   ...kValidStagesAll, };\n  }\n}\nexport const kTextureSampleTypes = [\n  'float',\n  'unfilterable-float',\n  'depth',\n  'sint',\n  'uint',\n] as const;\nassertTypeTrue<TypeEqual<GPUTextureSampleType, typeof kTextureSampleTypes[number]>>();\n\nexport function storageTextureBindingTypeInfo(d: GPUStorageTextureBindingLayout) {\n  /* prettier-ignore */\n  switch (d.access) {\n    case 'read-only':  return { usage: GPUConst.TextureUsage.STORAGE, ...kBindingKind.storageTex, ...kValidStagesAll,          };\n    case 'write-only': return { usage: GPUConst.TextureUsage.STORAGE, ...kBindingKind.storageTex, ...kValidStagesStorageWrite, };\n  }\n}\nexport const kStorageTextureAccessValues = ['read-only', 'write-only'] as const;\nassertTypeTrue<TypeEqual<GPUStorageTextureAccess, typeof kStorageTextureAccessValues[number]>>();\n\nexport type BGLEntry = Omit<GPUBindGroupLayoutEntry, 'binding' | 'visibility'>;\nexport function texBindingTypeInfo(e: BGLEntry) {\n  if (e.texture !== undefined) return sampledTextureBindingTypeInfo(e.texture);\n  if (e.storageTexture !== undefined) return storageTextureBindingTypeInfo(e.storageTexture);\n  unreachable();\n}\nexport function bindingTypeInfo(e: BGLEntry) {\n  if (e.buffer !== undefined) return bufferBindingTypeInfo(e.buffer);\n  if (e.texture !== undefined) return sampledTextureBindingTypeInfo(e.texture);\n  if (e.sampler !== undefined) return samplerBindingTypeInfo(e.sampler);\n  if (e.storageTexture !== undefined) return storageTextureBindingTypeInfo(e.storageTexture);\n  unreachable('GPUBindGroupLayoutEntry has no BindingLayout');\n}\n\nexport function bufferBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...(includeUndefined ? [{ buffer: { type: undefined } }] : []),\n    { buffer: { type: 'uniform' } },\n    { buffer: { type: 'storage' } },\n    { buffer: { type: 'read-only-storage' } },\n  ] as const;\n}\nexport function samplerBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...(includeUndefined ? [{ sampler: { type: undefined } }] : []),\n    { sampler: { type: 'comparison' } },\n    { sampler: { type: 'filtering' } },\n    { sampler: { type: 'non-filtering' } },\n  ] as const;\n}\nexport function textureBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...(includeUndefined ? [{ texture: { multisampled: undefined } }] : []),\n    { texture: { multisampled: false } },\n    { texture: { multisampled: true } },\n  ] as const;\n}\nexport function storageTextureBindingEntries(format: GPUTextureFormat): readonly BGLEntry[] {\n  return [\n    { storageTexture: { access: 'read-only', format } },\n    { storageTexture: { access: 'write-only', format } },\n  ] as const;\n}\nexport function sampledAndStorageBindingEntries(\n  includeUndefined: boolean,\n  storageTextureFormat: GPUTextureFormat = 'rgba8unorm'\n): readonly BGLEntry[] {\n  return [\n    ...textureBindingEntries(includeUndefined),\n    ...storageTextureBindingEntries(storageTextureFormat),\n  ] as const;\n}\n/** Generates all different types of binding entries.\n * Does not generate variants with different:\n * - buffer.hasDynamicOffset\n * - texture.sampleType\n * - texture.viewDimension\n * - storageTexture.viewDimension\n */\nexport function allBindingEntries(\n  includeUndefined: boolean,\n  storageTextureFormat: GPUTextureFormat = 'rgba8unorm'\n): readonly BGLEntry[] {\n  return [\n    ...bufferBindingEntries(includeUndefined),\n    ...samplerBindingEntries(includeUndefined),\n    ...sampledAndStorageBindingEntries(includeUndefined, storageTextureFormat),\n  ] as const;\n}\n\n// Shader stages\n\nexport const kShaderStages: readonly GPUShaderStageFlags[] = [\n  GPUConst.ShaderStage.VERTEX,\n  GPUConst.ShaderStage.FRAGMENT,\n  GPUConst.ShaderStage.COMPUTE,\n];\nexport const kShaderStageCombinations: readonly GPUShaderStageFlags[] = [0, 1, 2, 3, 4, 5, 6, 7];\n\n// TODO: Update with all possible sample counts when defined\n// TODO: Switch existing tests to use kTextureSampleCounts\nexport const kTextureSampleCounts = [1, 4] as const;\n\n// Pipeline limits\n\n// TODO: Update maximum color attachments when defined\nexport const kMaxColorAttachments = 4;\n\nexport const kMaxVertexBuffers = 8;\nexport const kMaxVertexAttributes = 16;\nexport const kMaxVertexBufferArrayStride = 2048;\n"],"file":"capability_info.js"}